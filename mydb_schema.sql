-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;
    
CREATE SEQUENCE subscribe_user_id_seq;
CREATE SEQUENCE bulletinraw_id_seq;
CREATE SEQUENCE topics_topicid_seq;

-- CREATE TABLE IF NOT EXISTS public.account
-- (
--     userid integer NOT NULL DEFAULT nextval('subscribe_user_id_seq'::regclass),
--     name text COLLATE pg_catalog."default",
--     chatid numeric NOT NULL,
--     status text COLLATE pg_catalog."default",
--     joindate timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
--     CONSTRAINT account_chatid_pkey PRIMARY KEY (chatid)
-- );


CREATE TABLE IF NOT EXISTS public.bulletinraw
(
    rawid integer NOT NULL DEFAULT nextval('bulletinraw_id_seq'::regclass),
    publisher character varying(255) COLLATE pg_catalog."default",
    title character varying(255) COLLATE pg_catalog."default",
    url character varying(1023) COLLATE pg_catalog."default",
    content text COLLATE pg_catalog."default",
    addtime timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    processstatus boolean DEFAULT false,
    CONSTRAINT bulletinraw_rawid_pkey PRIMARY KEY (rawid)
);
ALTER TABLE public.bulletinraw
ADD CONSTRAINT unique_title_url UNIQUE (title, url);

-- CREATE TABLE IF NOT EXISTS public.users
-- (
--     userid SERIAL NOT NULL,
--     name TEXT UNIQUE,
--     chatid NUMERIC NOT NULL UNIQUE,
--     joindate TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
--     CONSTRAINT users_chatid_pkey PRIMARY KEY (chatid)
-- );

CREATE TABLE IF NOT EXISTS public.users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    chatid VARCHAR(50) NOT NULL UNIQUE,
    joindate TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS public.subscription (
    subscription_id SERIAL PRIMARY KEY,
    chatid VARCHAR(50),
    topic_name VARCHAR(50),
    join_date TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_user FOREIGN KEY (chatid) REFERENCES users(chatid) ON DELETE CASCADE,
    CONSTRAINT unique_user_topic UNIQUE (chatid, topic_name)
);


COMMIT;
